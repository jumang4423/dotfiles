name: std CI/CD

on: [push, pull_request]

permissions:
  id-token: write
  contents: read

concurrency:
  group: std-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover:
    outputs:
      hits: ${{ steps.discovery.outputs.hits }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nixbuild/nixbuild-action@v17
        with:
          nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          generate_summary_for: job
      - uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-created: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never
      - uses: divnix/std-action/discover@main
        id: discovery

  build:
    needs: discover
    name: ${{ matrix.target.jobName }}
    runs-on: ubuntu-latest
    if: fromJSON(needs.discover.outputs.hits).packages.build != '{}'
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).packages.build }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nixbuild/nixbuild-action@v17
        with:
          nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          generate_summary_for: job
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/run@main

  images:
    needs: [discover, build]
    name: ${{ matrix.target.jobName }}
    runs-on: ubuntu-latest
    if: fromJSON(needs.discover.outputs.hits).oci-images.publish != '{}'
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).oci-images.publish }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nixbuild/nixbuild-action@v17
        with:
          nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          generate_summary_for: job
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/run@main

  # deploy:
  #   needs: [discover, images]
  #   name: ${{ matrix.target.jobName }}
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: development
  #     url: https://my.dev.example.com
  #   if: fromJSON(needs.discover.outputs.hits).deployments.apply != '{}'
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(needs.discover.outputs.hits).deployments.apply }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: nixbuild/nix-quick-install-action@master
  #     - uses: nixbuild/nixbuild-action@v17
  #       with:
  #         nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         generate_summary_for: job
  #     - uses: DeterminateSystems/magic-nix-cache-action@main
  #     - uses: divnix/std-action/run@main

  darwin-rollout:
    needs: discover
    name: ${{ matrix.target.jobName }}
    runs-on: macos-latest
    if: fromJSON(needs.discover.outputs.hits).darwinConfigurations.switch != '{}'
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).darwinConfigurations.switch }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nixbuild/nixbuild-action@v17
        with:
          nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          generate_summary_for: job
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/run@main
