name: std CI/CD

on: [push, pull_request]

permissions:
  id-token: write
  contents: read

concurrency:
  group: std-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    needs: discover
    name: ${{ matrix.target.jobName }}
    runs-on: ubuntu-latest
    # packages.build が空配列 [] でない場合のみジョブを実行
    if: ${{ fromJSON(needs.discover.outputs.hits).packages.build != '[]' }}
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).packages.build }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nixbuild/nixbuild-action@v17
        with:
          nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          generate_summary_for: job
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      - uses: divnix/std-action/run@main

  images:
    needs: [discover, build]
    name: ${{ matrix.target.jobName }}
    runs-on: ubuntu-latest
    # oci-images.publish が空配列 [] でない場合のみ
    if: ${{ fromJSON(needs.discover.outputs.hits).oci-images.publish != '[]' }}
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).oci-images.publish }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nixbuild/nixbuild-action@v17
        with:
          nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          generate_summary_for: job
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      - uses: divnix/std-action/run@main

  darwin-rollout:
    needs: discover
    name: ${{ matrix.target.jobName }}
    runs-on: macos-latest
    # darwinConfigurations.switch が空配列 [] でない場合のみ
    if: ${{ fromJSON(needs.discover.outputs.hits).darwinConfigurations.switch != '[]' }}
    strategy:
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).darwinConfigurations.switch }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@master
      - uses: nixbuild/nixbuild-action@v17
        with:
          nixbuild_ssh_key: ${{ secrets.SSH_PRIVATE_KEY }}
          generate_summary_for: job
      - uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never
      - uses: divnix/std-action/run@main
